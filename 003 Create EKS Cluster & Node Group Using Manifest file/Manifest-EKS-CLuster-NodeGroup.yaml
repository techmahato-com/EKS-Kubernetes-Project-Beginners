# EKS Cluster Configuration using eksctl

##########
# Developer: Tech Mahato
# Subscribe to YouTube channel: Tech Mahato
##########

apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: dev-project-cluster  # Cluster name - update as per your project
  region: us-east-1  # AWS region where the cluster will be deployed
  version: "1.29"  # EKS Kubernetes version

# VPC and Subnet Configuration
vpc:
  cidr: "10.0.0.0/16"  # Define CIDR range for the VPC
  nat:
    gateway: Single  # Use Single NAT Gateway for cost optimization
  subnets:
    public:
      vpc-dev-public-us-east-1b:  
        id: "subnet-028194843c89232f6"  # Update with actual subnet ID
      Nvpc-dev-public-us-east-1a:
        id: "subnet-04b22dd2582a9c2c5"  # Update with actual subnet ID
    private:
      vpc-dev-private-us-east-1b:
        id: "subnet-049465ab3b1b842ec"  # Private subnet for workloads
      vpc-dev-private-us-east-1a:
        id: "subnet-0631d80ee2adea56b"
      vpc-dev-db-us-east-1b:
        id: "subnet-0ad77ece1ce67ebea"  # Private subnet for DB layer
      vpc-dev-db-us-east-1a:
        id: "subnet-039a5330a79a9bfec"

# Managed Node Groups Configuration
managedNodeGroups:
  - name: dev-project-App-NG-New-1  # Node group name
    ami: ami-01d4aea4600d4dd60  # Amazon Machine Image (AMI) for worker nodes
    amiFamily: AmazonLinux2  # AMI family for compatibility
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh dev-project-cluster --container-runtime containerd  # Bootstrap script
    minSize: 1  # Minimum number of worker nodes
    maxSize: 5  # Maximum scaling limit
    desiredCapacity: 1  # Desired number of nodes at launch
    instanceType: "t3.medium"  # Instance type for nodes
    volumeSize: 30  # Disk size for each node
    volumeEncrypted: true  # Enable encryption for security
    privateNetworking: true  # Ensures nodes communicate over private subnets
    subnets:
      - vpc-dev-private-us-east-1a  # Private subnet allocation
      - vpc-dev-private-us-east-1b

    labels: {role: dev-App-NG-1}  # Labels for Kubernetes workloads
    ssh:
      publicKeyName: AM-es-east-1-kp  # SSH key for accessing nodes
    tags:
      nodegroup-role: dev-App-NG-1
      nodegroup-name: dev-project-App-NG-New-1
      Project: Dev-Project
      Env: Dev
      Layer: App
      Managedby: TechMahato-Team

    iam:
      attachPolicyARNs:
        - arn:aws:iam::123456789012:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::123456789012:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::123456789012:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::123456789012:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::123456789012:policy/CloudWatchAgentServerPolicy
      withAddonPolicies:
        autoScaler: true
        externalDNS: true
        certManager: true
        ebs: true
        efs: true
        albIngress: true
        cloudWatch: true

  - name: dev-project-Monitoring-NG-2  # Second node group for monitoring workloads
    ami: ami-01d4aea4600d4dd60
    amiFamily: AmazonLinux2
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh dev-project-cluster --container-runtime containerd
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    instanceType: "t3.medium"
    volumeSize: 30
    volumeEncrypted: true  # Enable encryption for security
    privateNetworking: true
    subnets:
      - vpc-dev-private-us-east-1a
      - vpc-dev-private-us-east-1b
    labels: {role: dev-Monitoring-NG-1}
    ssh:
      publicKeyName: AM-es-east-1-kp
    tags:
      nodegroup-role: dev-Monitoring-NG-2
      nodegroup-name: dev-project-Monitoring-NG-2
      Project: New-Project
      Env: Dev
      Layer: App
      Managedby: TechMahato-Team
    iam:
      attachPolicyARNs:
        - arn:aws:iam::123456789012:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::123456789012:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::123456789012:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::123456789012:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::123456789012:policy/CloudWatchAgentServerPolicy
      withAddonPolicies:
        autoScaler: true
        externalDNS: true
        certManager: true
        ebs: true
        efs: true
        albIngress: true
        cloudWatch: true

# Enable Secrets Encryption with AWS KMS
secretsEncryption:
  keyARN: arn:aws:kms:us-east-1:123456789012:key/6e2224c4-2635-4fd7-aba6-a0bc770c590e  # Update with your KMS Key ARN
